version: "3.7"

services:
    nginx:
        image: nginx
        ports:
            - target: 80
              published: 80
              protocol: tcp
              mode: host
            - target: 443
              published: 443
              protocol: tcp
              mode: host
            - target: 5000
              published: 5000
              protocol: tcp
              mode: host
        configs:
            - source: nginx_conf
              target: /etc/nginx/nginx.conf
            - source: nginx_default_conf
              target: /etc/nginx/conf.d/default.conf
            - source: portainer_proxy_conf
              target: /etc/nginx/conf.d/portainer.conf
            - source: registry_httpasswd
              target: /etc/nginx/conf.d/nginx.htpasswd
            - source: jenkins_proxy_conf
              target: /etc/nginx/conf.d/jenkins.conf
            - source: adminer_proxy_conf
              target: /etc/nginx/conf.d/adminer.conf
            - source: sonarqube_proxy_conf
              target: /etc/nginx/conf.d/sonarqube.conf
            - source: nexus_proxy_conf
              target: /etc/nginx/conf.d/nexus.conf
            - source: registry_proxy_conf
              target: /etc/nginx/conf.d/registry.conf
            - source: registry_ui_proxy_conf
              target: /etc/nginx/conf.d/registry-ui.conf
        volumes:
            - type: bind
              source: /opt/devops/web_folder
              target: /usr/share/nginx/html
            - type: bind
              source: /etc/letsencrypt
              target: /certs
        deploy:
            mode: replicated
            replicas: 1
            placement:
                constraints: [node.role == manager]
        networks:
            - web_network

    agent:
        image: portainer/agent
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
            - /var/lib/docker/volumes:/var/lib/docker/volumes
        networks:
            - agent_network
        deploy:
            mode: global
            placement:
                constraints: [node.platform.os == linux]

    portainer:
        image: portainer/portainer
        command: -H tcp://tasks.agent:9001 --tlsskipverify
        volumes:
            - portainer_data:/data
        networks:
            - agent_network
            - web_network
        deploy:
            mode: replicated
            replicas: 1
            placement:
                constraints: [node.role == manager]

    jenkins:
        image: jenkins/jenkins:lts
        user: root
        privileged: true
        volumes:
            - jenkins_data:/var/jenkins_home
            - /var/run/docker.sock:/var/run/docker.sock
        networks:
            - web_network
        deploy:
            mode: replicated
            replicas: 1
            placement:
                constraints: [node.role == manager]

    postgres:
        image: postgres:latest
        environment:
            POSTGRES_DB_PASSWORD_FILE: /run/secrets/postgres_password
        volumes:
            - postgres_data:/var/lib/postgresql/data
        networks:
            - postgres_net
        secrets:
            - source: postgres_password
              target: /run/secrets/postgres_password
              mode: 444
        deploy:
            mode: replicated
            replicas: 1
            placement:
                constraints: [node.role == manager]

    adminer:
        image: adminer:latest
        networks:
            - web_network
            - postgres_net
        depends_on:
            - postgres
        deploy:
            mode: replicated
            replicas: 1
            placement:
                constraints: [node.role == manager]

    sonarqube:
        image: sonarqube:lts
        depends_on:
            - postgres
        environment:
            - sonar.jdbc.username=postgres
            - sonar.jdbc.password=postgres
            - sonar.jdbc.url=jdbc:postgresql://postgres/sonarqube
        volumes:
            - sonarqube_conf:/opt/sonarqube/conf
            - sonarqube_logs:/opt/sonarqube/logs
            - sonarqube_data:/opt/sonarqube/data
            - sonarqube_extensions:/opt/sonarqube/extensions
        networks:
            - web_network
            - postgres_net
        deploy:
            mode: replicated
            replicas: 1
            placement:
                constraints: [node.role == manager]

    nexus:
        image: sonatype/nexus3:latest
        volumes:
            - nexus_data:/nexus_data
        networks:
            - web_network
        deploy:
            mode: replicated
            replicas: 1
            placement:
                constraints: [node.role == manager]

    registry:
        image: registry:latest
        volumes:
            - type: bind
              source: /opt/devops/docker_registry
              target: /var/lib/registry
        networks:
            - web_network
        deploy:
            mode: replicated
            replicas: 1
            placement:
                constraints: [node.role == manager]

    registry-ui:
        image: konradkleine/docker-registry-frontend:v2
        environment:
            ENV_DOCKER_REGISTRY_HOST: registry
            ENV_DOCKER_REGISTRY_PORT: 5000
        networks:
            - web_network
        deploy:
            mode: replicated
            replicas: 1
            placement:
                constraints: [node.role == manager]

secrets:
    postgres_password:
        file: ./secrets/postgres_password

volumes:
    portainer_data:
    jenkins_data:
    nexus_data:
    postgres_data:
    sonarqube_conf:
    sonarqube_logs:
    sonarqube_data:
    sonarqube_extensions:

configs:
    nginx_conf:
        file: ./nginx_conf/nginx.conf
    nginx_default_conf:
        file: ./nginx_conf/conf_d/default.conf
    portainer_proxy_conf:
        file: ./nginx_conf/conf_d/portainer.conf
    jenkins_proxy_conf:
        file: ./nginx_conf/conf_d/jenkins.conf
    sonarqube_proxy_conf:
        file: ./nginx_conf/conf_d/sonar.conf
    nexus_proxy_conf:
        file: ./nginx_conf/conf_d/nexus.conf
    adminer_proxy_conf:
        file: ./nginx_conf/conf_d/adminer.conf
    registry_proxy_conf:
        file: ./nginx_conf/conf_d/registry.conf
    registry_ui_proxy_conf:
        file: ./nginx_conf/conf_d/registry-ui.conf
    registry_httpasswd:
        file: ./httpasswd/registry_httpasswd

networks:
    agent_network:
        driver: overlay
        attachable: true
    web_network:
        driver: overlay
        attachable: true
    postgres_net:
        driver: overlay
        attachable: true
